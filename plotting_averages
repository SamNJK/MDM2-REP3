"""
This code we run through task 1, plotting how the number of susceptible, infected and recovered walkers vary over steps( n_steps) and multiple simulations (n_runs).
It then plots the averages after n runs of n steps.
"""

import numpy as np
import matplotlib.pyplot as plt

# Parameters
grid_size = 100
n_individuals = 1000
p1 = 1.0  # Infection probability
p2 = 0.01
n_steps = 500  # Number of time steps
n_runs = 2  # Number of simulation runs

# Initialize arrays to store the sum of counts from each run
total_infected_counts = np.zeros(n_steps)
total_susceptible_counts = np.zeros(n_steps)
total_recovered_counts = np.zeros(n_steps)

for run in range(n_runs):
    """
    Looping through the requested number of runs
    n_runs = number of runs
    """
    if run % 100 == 0:
        print(f'Step {run} of {n_runs}')
    # Reset the status and positions for each run
    status = np.zeros(n_individuals, dtype=int)
    status[0] = 1  # Initialize the first individual as infected
    positions = np.random.randint(0, grid_size, (n_individuals, 2))

    # Arrays to store counts per time step in a single run
    infected_counts = []
    susceptible_counts = []
    recovered_counts = []

    for _ in range(n_steps):    
        """
        Looping through the requested number of steps
        n_steps = number of steps
        """
        
        if _ % 100 == 0:
            print(f'Step {_} of {n_steps}')
        # Random walk: Change the position of each individual randomly
        steps = np.random.randint(-1, 2, (n_individuals, 2))
        positions = (positions + steps) % grid_size  # Apply periodic boundary conditions

        # Infection process
        for i in range(n_individuals):
            """
            Going through each individual and checking if they are infected, ff they are infected, we check if they infect other individuals
            n_individuals = number of individuals
            """
            if status[i] == 1:  # For each infected individual
                for j in range(n_individuals):
                    if i != j and status[j] == 0:
                        if np.array_equal(positions[i], positions[j]) and np.random.rand() < p1:
                            status[j] = 1  # Susceptible individual becomes infected

        # Recovery process
        for i in range(n_individuals):
            if status[i] == 1 and np.random.rand() < p2:
                status[i] = 2

        # Track the number of individuals in each status
        infected_counts.append(np.sum(status == 1))
        susceptible_counts.append(np.sum(status == 0))
        recovered_counts.append(np.sum(status == 2))

    # Accumulate the results from this run
    total_infected_counts += np.array(infected_counts)
    total_susceptible_counts += np.array(susceptible_counts)
    total_recovered_counts += np.array(recovered_counts)

# Compute the average counts at each time step
average_infected_counts = total_infected_counts / n_runs
average_susceptible_counts = total_susceptible_counts / n_runs
average_recovered_counts = total_recovered_counts / n_runs

# Plotting the average results
plt.plot(average_infected_counts, label='Average Infected')
plt.plot(average_susceptible_counts, label='Average Susceptible')
plt.plot(average_recovered_counts, label='Average Recovered')
plt.xlabel('Time Steps')
plt.ylabel('Average Number of Individuals')
plt.title('Average Spread of Disease over Time Across Multiple Runs')
plt.legend()
plt.show()
